#!/Users/jlibbey/.dotfiles/env/bin/python

"""
Get an API token here: https://idonethis.com/api/token/
Configure `I_DONE_THIS_USER` and `I_DONE_THIS_TOKEN` environment variables
"""

from collections import defaultdict
import datetime
import os
import json
import requests
import sys
import webbrowser

from termcolor import colored

ME = 'me'
MY_USER = os.environ.get('I_DONE_THIS_USER')
TEAM = '02ebfa70a88b'
TOKEN = os.environ.get('I_DONE_THIS_TOKEN')
URL_DONES = 'https://beta.idonethis.com/api/v2/entries'
URL_TEAM_DONES = 'https://beta.idonethis.com/api/v2/teams/{}/entries/'.format(TEAM)
URL_MAIN = 'https://beta.idonethis.com/t/{}/'.format(TEAM)
TODAY = datetime.datetime.now().strftime('%Y-%m-%d')
GOAL = 'goal'

POP = ('pop')
LS = ('ls', 'list')


def print_item(item):
    text = item['text']
    id_ = item['id']
    color = 'green'
    if item['status'] == GOAL:
        color = 'red'
        if not text.startswith('[ ] '):
            text = '[ ] {}'.format(text)
    else:
        if not text.startswith('[x] '):
            text = '[x] {}'.format(text)
    text = '{}'.format(text)
    print colored(text, color)

def print_owner(owner, items):
    print colored(owner, attrs=['bold'])
    for item in items:
        print_item(item)
    print('')

def get_dones(session):
    r = session.get(URL_TEAM_DONES)
    resp = r.json()
    dones = defaultdict(list)
    for item in resp:
        if item['occurred_on'] == TODAY or item['status'] == GOAL:
            dones[item['user']['email_address']].append({
                'text': item['body'],
                'id': item['hash_id'],
                'status': item['status'],
                'created_at': datetime.datetime.strptime(item['created_at'][:-10], "%Y-%m-%dT%H:%M:%S")
            })
    for user, done_list in dones.items():
        dones[user] = sorted(done_list, key=lambda k: k['created_at'])
    return dones

def create_done(session, text, status='done'):
    data = {
        'body': text,
        'team_id': TEAM,
    }
    r = session.post(URL_DONES, json=data)
    resp = r.json()
    print resp['hash_id']

def delete_done(session, id_):
    url = '{url}/{id_}'.format(url=URL_DONES, id_=id_)
    r = session.delete(url)

def update_done(session, item):
    url = '{url}/{id_}'.format(url=URL_DONES, id_=item['id'])
    data = {
        'raw_text': item['text'].replace('[ ]', '[x]'),
    }
    r = session.patch(
        url=url,
        data=data,
    )
    print r.json()

def main(args):
    if len(args) >= 2:
        first_arg = args[1]
        session = requests.Session()
        session.headers['Authorization'] = 'Token {}'.format(TOKEN)
        if first_arg in LS:
            dones = get_dones(session)
            for owner, items in dones.items():
                print_owner(owner, items)
        elif first_arg in ME:
            dones = get_dones(session)
            print_owner(MY_USER, dones[MY_USER])
        elif first_arg in POP:
            my_dones = get_dones(session)[MY_USER]
            most_recent = my_dones[-1]
            print 'Removed task: {}'.format(most_recent['text'])
            delete_done(session, most_recent['id'])
        else:
            text = ' '.join(args[1:])
            create_done(session, text)
    else:
        # there is something in stdin
        if not sys.stdin.isatty():
            # take first line and use it as the `done`
            piped_in = sys.stdin.read()
            # still display what the command outputted
            print piped_in
            line = piped_in.split('\n')[0].strip()
            sys.argv.append(line)
            main(sys.argv)
        # open site if there are no args, via stdin or cli
        else:
            webbrowser.open(URL_MAIN)


if __name__ == '__main__':
    main(sys.argv)
